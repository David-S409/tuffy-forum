// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  firstName  String
  lastName   String
  email      String     @unique
  googleID   String     @unique
  year       String?
  isExpert   Boolean    @default(false)
  isMod      Boolean    @default(false)
  profileImg String?
<<<<<<< HEAD
  courses    Course[]
=======
  courses    UserCourses[]
>>>>>>> refs/remotes/origin/frontend-test
  questions  Question[]
  answers    Answer[]
}

model Course {
  courseId   Int        @id @default(autoincrement())
  courseCode String     @unique
  name       String
<<<<<<< HEAD
  users      User[]
  questions  Question[]
}

model Question {
  questionId Int      @id @default(autoincrement())
  author     User     @relation(fields: [authorId], references: [userId])
  authorId   Int
  course     Course   @relation(fields: [courseId], references: [courseId])
  courseId   Int
  header     String
  text       String
  postDate   DateTime @default(now())
  votes      Int      @default(0)
=======
  users      UserCourses[]
  questions  Question[]
}

model UserCourses {
  user       User       @relation(fields: [userId], references: [userId])
  userId     Int
  course     Course     @relation(fields: [courseId], references: [courseId])
  courseId   Int

  @@id([userId, courseId])
}

model Question {
  questionId Int        @id @default(autoincrement())
  author     User       @relation(fields: [authorId], references: [userId])
  authorId   Int
  course     Course     @relation(fields: [courseId], references: [courseId])
  courseId   Int
  header     String
  text       String
  postDate   DateTime   @default(now())
  votes      Int        @default(0)
>>>>>>> refs/remotes/origin/frontend-test
  tags       Tag[]
  answers    Answer[]

  @@index(fields: [header, text])
}

model Answer {
<<<<<<< HEAD
  answerId   Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [questionId])
  questionId Int
  author     User     @relation(fields: [authorId], references: [userId])
  authorId   Int
  text       String
  postDate   DateTime @default(now())
  voteCount  Int      @default(0)
}

model Tag {
  tagId     Int        @id
  name      String     @unique
=======
  answerId   Int        @id @default(autoincrement())
  question   Question   @relation(fields: [questionId], references: [questionId])
  questionId Int
  author     User       @relation(fields: [authorId], references: [userId])
  authorId   Int
  text       String
  postDate   DateTime   @default(now())
  voteCount  Int        @default(0)
}

model Tag {
  tagId     Int         @id
  name      String      @unique
>>>>>>> refs/remotes/origin/frontend-test
  questions Question[]
}
